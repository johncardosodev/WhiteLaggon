using CardosoResort.Domain.Entities;
using CardosoResort.Infrastructure.Data;
using CardosoResort.Web.ViewModels;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;

namespace CardosoResort.Web.Controllers
{
    public class VillaFracaoController : Controller
    {
        //Com .net Core o contexto do banco de dados é injetado no controlador por meio do construtor
        //Portanto apenas buscamos o DB que já foi configurado no Program.cs e buscamos a implementação do DbContext
        //O que vai configurar a connectionString, abrir connexao e dar a connexao
        private readonly ApplicationDbContext _db;

        public VillaFracaoController(ApplicationDbContext db)
        {
            //Aqui, Dependency Injection é usada para injetar o contexto do banco de dados no controlador
            _db = db;
        }

        public IActionResult Index()
        {
            //Usamos o método Include para incluir a entidade relacionada Villa na consulta. Assim, podemos acessar as propriedades da entidade relacionada na visualização.
            //Até podemos usar outro Include para incluir mais entidades relacionadas
            var villasFracoes = _db.VillaFracoes.Include(u => u.Villa).ToList();
            return View(villasFracoes);
        }

        public IActionResult Create()
        {
            //DropdownList Com viewBag para a view
            //ViewBag.VILLAS = new SelectList(_db.Villas, "Id", "Nome");

            //Fazer o dropdownList com ViewModel sem usar ViewBag. É mais seguro e mais limpo segundo o livro
            VillaFracaoVM villaFracaoVM = new VillaFracaoVM //Instanciamos um novo objeto da classe VillaFracaoVM
            {
                VillaFracao = new VillaFracao(),
                VillaLista = new SelectList(_db.Villas, "Id", "Nome")
            };

            //Verificar se a base de dados tem alguma fracao
            if (_db.VillaFracoes.Any())
            {
                //Iniciamos já a propriedade VillaFracao com o ultimo id+1 da base de dados
                villaFracaoVM.VillaFracao.Villa_Fracao = _db.VillaFracoes.Max(vf => vf.Villa_Fracao) + 1;
            }

            return View(villaFracaoVM);
        }

        [HttpPost]
        public IActionResult Create(VillaFracaoVM objeto)
        {
            //ModelState.Remove("Villa"); //caso nao metemos [validadeNever] no propriedade  VillaFracao

            //Verificar se existe Villa_Fracao na base de dados com o mesmo numero da villaFracao
            bool villaFracaoExiste = _db.VillaFracoes.Any(vf => vf.Villa_Fracao == objeto.VillaFracao.VillaId);
            if (villaFracaoExiste)
            {
                TempData["error"] = "Numero da Fração já existe"; //Usamos TempData para enviar uma mensagem de erro para a próxima solicitação
                ModelState.AddModelError("Villa_Fracao", "Numero da villa já existe"); //Adicionamos um erro ao modelo

                //Precisamos recarregar a lista de villas para o dropdownList após a validação, caso contrário, a lista será perdida
                //DropdownList para o ViewModel
                objeto.VillaLista = new SelectList(_db.Villas, "Id", "Nome");
                return View(objeto); //Se o modelo não for válido mandar de volta para a página de criação
            }

            if (ModelState.IsValid && !villaFracaoExiste)
            {
                _db.VillaFracoes.Add(objeto.VillaFracao);
                _db.SaveChanges();
                TempData["success"] = "Numero para a vila foi criada com sucesso"; //Usamos TempData para enviar uma mensagem de sucesso para a próxima solicitação
                return RedirectToAction(nameof(Index)); //Se o modelo for válido, redirecionamos para a página de índice
            }
            return View(); //Se o modelo não for válido mandar de volta para a página de criação
        }

        public IActionResult Atualizar(int villaFracaoId)
        {
            //DropdownList com viewModel
            VillaFracaoVM? villaFracaoVM = new VillaFracaoVM
            {
                VillaFracao = _db.VillaFracoes.FirstOrDefault(v => v.Villa_Fracao == villaFracaoId),
                VillaLista = new SelectList(_db.Villas, "Id", "Nome")
            };

            //Verificar se a fracao foi encontrada
            if (villaFracaoVM.VillaFracao == null) //Se a fracao não for encontrada, retornamos um erro 404
            {
                return RedirectToAction("Error", "Home"); //Redirecionamos para a página de erro
            }

            return View(villaFracaoVM); //Se a fracao for encontrada, retornamos a view com o objeto
        }

        [HttpPost]
        public IActionResult Atualizar(VillaFracaoVM objeto)
        {
            if (ModelState.IsValid)
            {
                _db.VillaFracoes.Update(objeto.VillaFracao);
                _db.SaveChanges();
                TempData["success"] = $"Fração {objeto.VillaFracao.Villa_Fracao} foi atualizada com sucesso"; //Usamos TempData para enviar uma mensagem de sucesso para a próxima solicitação
                return RedirectToAction(nameof(Index)); //Se o modelo for válido, redirecionamos para a página de índice
            }

            TempData["error"] = "Erro ao atualizar a fração"; //Usamos TempData para enviar uma mensagem de erro para a próxima solicitação
            objeto.VillaLista = new SelectList(_db.Villas, "Id", "Nome"); //Recarregar a lista de villas para o dropdownList após a validação, caso contrário, a lista será perdida
            return View(objeto); //Se o modelo não for válido mandar de volta para a página de criação
        }

        public IActionResult Apagar(int villaFracaoId)
        {
            //DropdownList com viewModel
            VillaFracaoVM? villaFracaoVM = new VillaFracaoVM
            {
                VillaFracao = _db.VillaFracoes.FirstOrDefault(v => v.Villa_Fracao == villaFracaoId),
                VillaLista = new SelectList(_db.Villas, "Id", "Nome")
            };

            //Verificar se a fracao foi encontrada
            if (villaFracaoVM.VillaFracao == null) //Se a fracao não for encontrada, retornamos um erro 404
            {
                return RedirectToAction("Error", "Home"); //Redirecionamos para a página de erro
            }

            return View(villaFracaoVM); //Se a fracao for encontrada, retornamos a view com o objeto
        }

        [HttpPost]
        public IActionResult Apagar(VillaFracaoVM objeto)
        {
            VillaFracao? objetoBd = _db.VillaFracoes.FirstOrDefault(v => v.Villa_Fracao == objeto.VillaFracao.Villa_Fracao);

            //Verificar se a fracao foi encontrada
            if (objetoBd is not null)
            {
                _db.VillaFracoes.Remove(objetoBd);
                _db.SaveChanges();
                TempData["success"] = $"Fração {objeto.VillaFracao.Villa_Fracao} foi apagada com sucesso"; //Usamos TempData para enviar uma mensagem de sucesso para a próxima solicitação
                return RedirectToAction(nameof(Index)); //Se o modelo for válido, redirecionamos para a página de índice com o nameof(Index) para evitar erros de digitação
            }

            TempData["error"] = "Erro ao apagar a fração"; //Usamos TempData para enviar uma mensagem de erro para a próxima solicitação
            objeto.VillaLista = new SelectList(_db.Villas, "Id", "Nome"); //Recarregar a lista de villas para o dropdownList após a validação, caso contrário, a lista será perdida
            return View(objeto); //Se o modelo não for válido mandar de volta para a página de criação
        }
    }
}